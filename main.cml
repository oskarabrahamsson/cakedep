(* =========================================================================
 * cakedep: resolve cakeml include pragmas
 *
 * Oskar Abrahamsson, 2021                                    www.cakeml.org
 * ========================================================================= *)

@include('depgraph.cml')
@include('util.cml')

(* -------------------------------------------------------------------------
 * The function [compute_deps] takes a filename, transitively computes the
 * dependencies of this file, and generates a topological order together with
 * a concatenated string that represent the contents (code) of those files,
 * presented in the topological order.
 * ------------------------------------------------------------------------- *)

val print_err = TextIO.output TextIO.stdErr

fun compute_deps fname =
  let
    val _ = DepGraph.build fname
    val _ = not (DepGraph.cyclic fname) orelse
            failwith "Dependency graph contains a cycle"
    val order = DepGraph.toporder fname
    val depgraph = DepGraph.dump ()
    val _ = if !Debug.debug then
              (print_err "[compute_deps] ";
               print_err "Computed the following topological order (shown here";
               print_err " in reverse):\n";
               List.mapi (fn i => fn s =>
                            (print_err "  ";
                             print_err (Int.toString (i + 1) ^ ". ");
                             print_err (s ^ "\n")))
                         order;
               print_err "\n")
            else ()
    val code =
      String.concat (List.map (fst o Option.valOf o Alist.lookup depgraph)
                               order)
  in
    (code, order)
  end;

(* -------------------------------------------------------------------------
 * Entrypoint.
 * ------------------------------------------------------------------------- *)

val usage =
  String.concat [
    "cakedep: thing for resolving dependencies in CakeML projects\n",
    "Usage: ", CommandLine.name (), " [options] [--] <filename>\n",
    "\n",
    "OPTIONS:\n",
    "\n",
    "    -h, --help         Show this message\n",
    "    -v, --verbose      Enable printing of debug messages\n",
    "    -o <filename>      Write output to <filename> (default=output.cml)\n",
    "    -n, --no-output    Write no output; instead, write the filenames in\n",
    "                       topological order to stdout\n",
    "\n"
  ];

structure Config = struct
  val filename = Ref "";
  val outfile = Ref "output.cml";
  val no_output = Ref False;
end (* struct *)

fun parse_flags flags =
  case flags of
    [] => ()
  | "--verbose"::rest =>
      (Debug.debug := True;
       parse_flags rest)
  | "-v"::rest =>
      (Debug.debug := True;
       parse_flags rest)
  | "--help"::_ =>
      (print_err usage;
       Runtime.exit 0)
  | "-h"::_ =>
      (print_err usage;
       Runtime.exit 0)
  | "-o"::fname::rest =>
      (Config.outfile := fname;
       parse_flags rest)
  | "--no-output"::rest =>
      (Config.no_output := True;
       parse_flags rest)
  | "-n"::rest =>
      (Config.no_output := True;
       parse_flags rest)
  | "--"::fname::_ => Config.filename := fname
  | flag::rest =>
      if String.sub flag 0 = #"-" then
        (print_err ("Unknown option: " ^ flag ^ "...\n");
         print_err ("Write: " ^ (CommandLine.name ()) ^ " --help");
         print_err " to see usage information.\n";
         Runtime.exit 1)
      else
        (Config.filename := flag;
         parse_flags rest);

val _ =
  let
    val _ = parse_flags (CommandLine.arguments ())
    val _ = String.size (!Config.filename) <> 0 orelse
            failwith ("No input filename given, " ^
                      "write: " ^ (CommandLine.name ()) ^
                      " --help for help.")
    val (code, order) = compute_deps (!Config.filename)
  in
    if not (!Config.no_output) then
      let
        val ostream = TextIO.openOut (!Config.outfile)
        val _ = TextIO.output ostream code
        val _ = TextIO.closeOut ostream
      in
        print "cakedep: Wrote output to \"";
        print (!Config.outfile);
        print "\". Bye!\n\n"
      end
    else
      (List.app (fn fname => print (fname ^ " ")) order;
       print "\n")
  end
  handle Fail err =>
    (print_err (CommandLine.name ());
     print_err " failed with this error:\n   ";
     print_err err;
     print_err "\n";
     Runtime.exit 1);

(*
vim: ft=sml
*)

(* =========================================================================
 * cakedep: resolve cakeml include pragmas
 *
 * Oskar Abrahamsson, 2021                                    www.cakeml.org
 * ========================================================================= *)

@include('util.cml')

(* -------------------------------------------------------------------------
 * A valid pragma should match this regex (I think):
 *   ^@include\('[^']*'\)\w*$
 *
 * - It should start at the beginning of the line
 * - It continues until the end of the line (any amount of trailing spaces
 *   until EOL is ok)
 * - Any non-tick symbol can go between the ticks, but it should only be
 *   something that can be interpreted as a filename
 * ------------------------------------------------------------------------- *)

fun dest_include str =
  case String.fields (fn x => x = #"'") str of
    [pre, file, post] =>
      if pre = "@include(" andalso
         String.sub post 0 = #")" andalso
         List.all Char.isSpace (List.drop (String.explode post) 1)
      then Some file
      else None
  | _ => None;

val is_include = Option.isSome o dest_include;

(* -------------------------------------------------------------------------
 * Read all lines from a file, and collect all includes.
 * We return the file path(s) found in the pragma(s), together with the rest
 * of the input file (i.e. post-pragma).
 *   ^@include\('[^']*'\)\w*$
 * ------------------------------------------------------------------------- *)

val dest_includes =
  let
    fun dest_includes' files l =
      case l of
        [] => (files, String.concat l)
      | h::t =>
          case dest_include h of
            None => dest_includes' files t
          | Some f => dest_includes' (f::files) t;
  in
    dest_includes' []
  end;

fun read_includes fname =
  (Debug.log_msg "read_includes" ("Reading from " ^ fname);
   case TextIO.b_inputLinesFrom fname of
     None => failwith ("No such file: " ^ fname)
   | Some lines => dest_includes lines);

(*
vim: ft=sml
*)
